true || true || true ; echo $?
true || true || false ; echo $?
true || false || true ; echo $?
false || true || true ; echo $?
true || false || false ; echo $?
false || true || false ; echo $?
false || false || true ; echo $?
false || false || false ; echo $?
true && true || true ; echo $?
true && true || false ; echo $?
true && false || true ; echo $?
false && true || true ; echo $?
true && false || false ; echo $?
false && true || false ; echo $?
false && false || true ; echo $?
false && false || false ; echo $?
true || true && true ; echo $?
true || true && false ; echo $?
true || false && true ; echo $?
false || true && true ; echo $?
true || false && false ; echo $?
false || true && false ; echo $?
false || false && true ; echo $?
false || false && false ; echo $?
true && true && true ; echo $?
true && true && false ; echo $?
true && false && true ; echo $?
false && true && true ; echo $?
true && false && false ; echo $?
false && true && false ; echo $?
false && false && true ; echo $?
false && false && false ; echo $?
(true || true) || true ; echo $?
(true || true) || false ; echo $?
(true || false) || true ; echo $?
(false || true) || true ; echo $?
(true || false) || false ; echo $?
(false || true) || false ; echo $?
(false || false) || true ; echo $?
(false || false) || false ; echo $?
(true && true) || true ; echo $?
(true && true) || false ; echo $?
(true && false) || true ; echo $?
(false && true) || true ; echo $?
(true && false) || false ; echo $?
(false && true) || false ; echo $?
(false && false) || true ; echo $?
(false && false) || false ; echo $?
(true || true) && true ; echo $?
(true || true) && false ; echo $?
(true || false) && true ; echo $?
(false || true) && true ; echo $?
(true || false) && false ; echo $?
(false || true) && false ; echo $?
(false || false) && true ; echo $?
(false || false) && false ; echo $?
(true && true) && true ; echo $?
(true && true) && false ; echo $?
(true && false) && true ; echo $?
(false && true) && true ; echo $?
(true && false) && false ; echo $?
(false && true) && false ; echo $?
(false && false) && true ; echo $?
(false && false) && false ; echo $?
true || (true || true) ; echo $?
true || (true || false) ; echo $?
true || (false || true) ; echo $?
false || (true || true) ; echo $?
true || (false || false) ; echo $?
false || (true || false) ; echo $?
false || (false || true) ; echo $?
false || (false || false) ; echo $?
true && (true || true) ; echo $?
true && (true || false) ; echo $?
true && (false || true) ; echo $?
false && (true || true) ; echo $?
true && (false || false) ; echo $?
false && (true || false) ; echo $?
false && (false || true) ; echo $?
false && (false || false) ; echo $?
true || (true && true) ; echo $?
true || (true && false) ; echo $?
true || (false && true) ; echo $?
false || (true && true) ; echo $?
true || (false && false) ; echo $?
false || (true && false) ; echo $?
false || (false && true) ; echo $?
false || (false && false) ; echo $?
true && (true && true) ; echo $?
true && (true && false) ; echo $?
true && (false && true) ; echo $?
false && (true && true) ; echo $?
true && (false && false) ; echo $?
false && (true && false) ; echo $?
false && (false && true) ; echo $?
false && (false && false) ; echo $?

https://man7.org/linux/man-pages/man1/cd.1p.html
https://man7.org/linux/man-pages/man1/exit.1p.html
https://man7.org/linux/man-pages/man1/env.1p.html
https://www.man7.org/linux/man-pages/man1/export.1p.html
https://man7.org/linux/man-pages/man1/unset.1p.html


/*
	Si connection type && o ||:
		Execute the first command.
			If the result of that is successful:
				si conector && or falla el comando y el conector es ||
				Execute the second command
			Else
				Return.
	Si pipeline
		mientras que hay el segundo comando sea una pipe
		{
			open pipe
				execute primero con fd input original y fd pipe[1]
			cerrar  fd input original
			fd in original = fd pipe[0]
		}
		execute las command 
		si ( fd input original >= 0)
			cerrar fd input original
*/

Si creas un archivo que en directorio que se llame ls, y este es el unico que empieza por la letra 'l'
	y ejecutas
	>l*
ejecuta el comando ls.
Por que?
	la expansion de l* dara como resultado solo el nombre de archivo ls (sin su path completo)
	en el siguiente paso de la ejecuci√≥n la rutina encargada de ejecutar,
	buscara en PATH si existe tal ejecutable de la forma /{path}/ls
	y en esta ocasion encontrara /bin/ls que es el comando ls original. 

Conclusion:
	La expansion aaa*aaa sustituye el nombre del archivo no el path

Ejecutar env -i bash genera un bash con un env por defecto para eliminar todas las varibles del entorno usar:

unset $(env | cut -d= -f1)
<<<<<<< HEAD


Una pipe es un mecanismo de comunicacion unidireccional entre procesos.
Una pipe tiene un extremo de solo escritura y un extremo de solo lectura

Se crea usando pipe(), da un par de fds, uno indicando el extremo de lectura y el otro el de lectura.

Si ps intenta leer en una pipe vacia, este es bloqueado hasta que pueda.
Si ps intenta escribir en pipe llena, este es bloqueado hasta que pueda

The communication channel provided by a pipe is a byte stream: there is no concept of message boundaries.

Si todos los fd refetidos a la region de escritura son cerrados, entonces un intento de lectura recibe EOF

Si todos los fd referidos a la lectura de una pipe se han cerrado, al intentar escribir se causa signal SIGPIPE en el ps que lo intenta.


pipe():
	creates  a  pipe,  a unidirectional data channel that can be used for interprocess communication.
	The array pipefd is used to return two file descriptors referring to the ends of the pipe.
	pipefd[0] refers to the
    read end of the pipe.  pipefd[1] refers to the write end of the pipe
	si error, retorna menor que 1

cmd1 | cmd2
=======
ls > 1(un numero)
>>>>>>> refs/remotes/origin/master
