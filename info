
RECONOCIMIENTO 

1. Si se reconoce el final de la entrada, se delimitará el token actual. Si no hay ningún token actual, se devolverá como token el indicador de fin de entrada.

2. Si el carácter anterior se usó como parte de un operador y el carácter actual no está entre comillas y puede usarse con los caracteres actuales para formar un operador,
   se usará como parte de ese token

3. Si el carácter anterior se usó como parte de un operador y el carácter actual no se puede usar con los caracteres actuales para
   formar un operador, se delimitará el operador que contiene el carácter anterior.

4. Si el carácter actual es una barra invertida, una comilla simple o una comilla doble ( '\' , '" o ' )' y no está entre comillas,
   afectará las comillas de los caracteres posteriores hasta el final del texto citado. Las reglas para quote son las descritas en quotes.
   Durante el reconocimiento del token, no se realizarán sustituciones y el token resultante contendrá exactamente los caracteres
   que aparecen en la entrada (excepto la unión <nueva línea>), sin modificar, incluidas las comillas incrustadas o adjuntas.
   u operadores de sustitución, entre la comilla y el final del texto citado, el token no estará delimitado por el final del campo citado.   

      QUOTES RULES:
         \     Si no entre comillas y valor literal del siguiente carácter excento <newline>
               Si \<newline> siguiente line continuación de línea actual. \<newline> se eliminarán antes de dividir  los tokens

         '     Preservará el valor literal de cada carácter dentro de las comillas simples.
               Las comillas simples no pueden aparecer entre comillas simples.

         "     Preservará el valor literal de todos los caracteres entre comillas dobles, excepto $ ` \
               $  conservará su significado especial en la expansion. Dentro de la cadena de caracteres desde un "${" adjunto hasta el '}' coincidente ,
                  deberá aparecer un número par de comillas dobles o simples sin escape

               ´ 
               \ La barra invertida conservará su significado especial como carácter de escape  solo cuando va seguida de uno de los siguientes caracteres cuando se considere especial:
                  $ ` " \ <newline>

5. Si el carácter actual es un '$' o '`' sin comillas , el shell identificará el inicio de cualquier candidato para expansión de parámetros ( Parameter Expansion ),
   sustitución de comandos ( Command Substitution ) o expansión aritmética ( Arithmetic Expansion ) a partir de su introducción sin comillas.
   secuencias de caracteres: '$' o "${" , "$(" o '`' y "$((" , respectivamente. El shell leerá suficientes entradas para determinar el final de la unidad que se va a expandir
   (como se explica en las secciones citadas). Mientras procesa los caracteres, si se encuentran instancias de expansiones o citas anidadas dentro de la sustitución,
   el shell las procesará recursivamente de la manera especificada para la construcción que se encuentre. Los caracteres encontrados desde el comienzo de la sustitución
   hasta su final, que permite cualquier recursividad necesaria para reconocer construcciones integradas, se incluirá sin modificaciones en el token de resultado,
   incluidos los operadores de sustitución o comillas integrados o adjuntos. El token no estará delimitado por el final de la sustitución.

6. Si el carácter actual no está entrecomillado y puede usarse como primer carácter de un nuevo operador,
   se delimitará el token actual (si lo hay). El carácter actual se utilizará como comienzo del siguiente token (operador).

7.Si el carácter actual es una <nueva línea> sin comillas, se delimitará el token actual.

8. Si el carácter actual es un <en blanco> sin comillas, cualquier token que contenga el carácter anterior se delimita y el carácter actual se descartará.

9. Si el carácter anterior formaba parte de una palabra, el carácter actual se añadirá a esa palabra.

10. Si el carácter actual es un '#' , este y todos los caracteres posteriores hasta, pero excluyendo, la siguiente <nueva línea>
   se descartarán como comentario. La <nueva línea> que finaliza la línea no se considera parte del comentario.

11. El carácter actual se utiliza como comienzo de una nueva palabra.
  

ALIAS SUBSTITUTION

Después de delimitar un token, pero antes de aplicar las reglas gramaticales en Shell Grammar , se examinará una palabra resultante que se identifica como la palabra del nombre de comando de un comando simple para determinar si es un nombre de alias válido y sin comillas

PALABRAS RESERVADAS

!  do esac  in
{  done  fi then
}  elif  for   until
case  else  if while

when none of the characters is quoted
The first word of a command
The first word following one of the reserved words other than case, for, or in
The third word in a case command (only in is valid in this case)
The third word in a for command (only in and do are valid in this case)


[[    function
]]    select


SPECIAL PARAMETERS

@
*  
#
?
-
$
!
0

VARIABLES DEL SHELL


EXPANSIONES



SHELL GRAMMAR

Convenciones léxicas gramaticales de Shell
   Se devolverá una <nueva línea> como identificador de token NEWLINE .
   Si el token es un operador, resultará el identificador del token para ese operador.
   Si la cadena consta únicamente de dígitos y el carácter delimitador es uno de '<' o '>' , se devolverá el identificador de token IO_NUMBER .
   De lo contrario, se obtiene el identificador de token TOKEN .
            Puede ser que el mismo TOKEN produzca una PALABRA , un NOMBRE , una ASIGNACIÓN 

REGLAS GRAMATICALES DE SHELL



WORD
ASSIGNMENT_WORD
NAME
NEWLINE
IO_NUMBER

'('  LBRA
')'  RBRA
'&' AND
'&&' AND_IF
';' SEMI
'||' OR_IF
';;' DSEMI
'<<' DLESS
'>>' DGREAT
'<' LESS
'>' GREAT
'|' PIPE
'<&' LESSAND
'>&' GREATAND
'<>' LESSGREAT
'<<-' DLESSDASH
'>|' CLOBBER
'if' If
'then' Then
'else' Else
'elif' Elif
'fi' Fi
'do' Do
'done' Done
'case' Case
'esac' Esac
'while' While
'until' Until
'for' For
'{' Lbrace
'}' Rbrace
'!' Bang
'in' In

'\t' TAB
' ' SPACE
'\n' JUMP

[ LSBRA
] RSBRA
% PERCENT
= EQUAL
~ TILDE
@ ATSIGN
* ASTERISK
# HASH
? QUEST
- LINE
" DQUOTE
' QUOTE
\ BSLASH
'$' DOLLAR




asdfñajsdhflajhsdf
